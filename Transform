// What the different classes are equal too

transform.position = new vector2/3/4   
transform.localScale = new vector2/3
transform.rotation = quaternion // ie. transform.rotation = Quaternion.Euler(0, 0, 0);

rb.velocity = vector2/3 // use rb.velocity to move objects when collision is taken into consideration
rb.velocity.magnitude = float

//in the inspector under rigidbody-Angular/Linear Drag will reduce speed over time, as it can´t be set via script

// lerp and move over time
                     // Math.f can also be used! 1 is the new destination and 0 would be the start position
transform.position = Vector3.Lerp(transform.position, new Vector3(0,0,0), 1); 
transform.position = Vector3.MoveTowards(transform.position, destination.transform.position, 1); moves in a straight line
   
// rotate over time   
   
Vector3 vectorTarget = target.position - transform.position;      // 2D  
float angle = Mathf.Atan2(vectorTarget.y, vectorTarget.x) * Mathf.Rad2Deg;      
Quaternion q = Quaternion.AngleAxis(angle, Vector3.forward);
transform.rotation = Quaternion.RotateTowards(transform.rotation, q, Time.deltaTime * 50);

//Rotate on local axis´s

float f = Mathf.LerpAngle(currentAngle, TargetAngle, 0.3f); // exponential falling function!
transform.rotation = Quaternion.Euler(transform.eulerAngles.x, transform.eulerAngles.y, f);
currentAngle = myOwnSpecifiedAngle = f;

// check if facing the object! 1 is directly facing, and 0 is directly opposite! 
float dot = Vector3.Dot(transform.forward, (player.transform.position - transform.position).normalized);

//Get mouse pos in world

Vector3 clickPos = Vector3.one;  // clickPos must be asigned before being used
Ray ray = cam.ScreenPointToRay(Input.mousePosition);
RaycastHit hit;

if(Physics.Raycast(ray, out hit))
{
   clickPos = hit.point; // remember to use point here and not transform.position!
}

//Rotate around target on both axis with mouse movement

v += Input.GetAxis("Mouse X") * cameraSpeed; // only calculate me when needed
h += Input.GetAxis("Mouse Y") * cameraSpeed;
h = Mathf.Clamp(h, -50, 87);

if (Input.GetAxis("Mouse X") != 0 || Input.GetAxis("Mouse Y") != 0)
{
   Vector3 dir = new Vector3(0, 0, -distance);
   Quaternion rot = Quaternion.Euler(h, v, 0);
   transform.position = player.position + rot * dir;
   transform.LookAt(player.position);
}

//Move in the forward vector of cam and ignoring the y pos

Vector3 targetDirection = Camera.main.transform.forward;
targetDirection.y = 0.0f;
targetDirection.Normalize(); // normalize that **! always normalize if you want to move it
rb.velocity += targetDirection * moveSpeed * Time.deltaTime;
